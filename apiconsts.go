// This file was autogenerated by genconsts.py


// LINSTOR - management of distributed storage/DRBD9 resources
// Copyright (C) 2017 - 2018  LINBIT HA-Solutions GmbH
// Author: Robert Altnoeder, Roland Kammerer, Gabor Hernadi
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package linstor
// ## Bits 62 - 63 (most significant 2) are reserved for the message type masks (error, warning, info)
// Bits 25 - 26 are reserved for the operation type masks (create, modify, delete)
// Bits 18 - 21 are reserved for the object type masks (node, resource, resource definition, ...)
// Bits 0  - 14 are reserved for codes ###
const MASK_ERROR = 0xC000000000000000
const MASK_WARN = 0x8000000000000000
const MASK_INFO = 0x4000000000000000
const MASK_SUCCESS = 0x0000000000000000

// ## Operation type masks ###
const MASK_CRT = 0x0000000001000000
const MASK_MOD = 0x0000000002000000
const MASK_DEL = 0x0000000003000000

// ## Type masks (Node, ResDfn, Res, VolDfn, Vol, NetInterface, ...) ###
const MASK_NODE = 0x00000000003C0000
const MASK_RSC_DFN = 0x0000000000380000
const MASK_RSC = 0x0000000000340000
const MASK_VLM_DFN = 0x0000000000300000
const MASK_VLM = 0x00000000002C0000
const MASK_NODE_CONN = 0x0000000000280000
const MASK_RSC_CONN = 0x0000000000240000
const MASK_VLM_CONN = 0x0000000000200000
const MASK_NET_IF = 0x00000000001C0000
const MASK_STOR_POOL_DFN = 0x0000000000180000
const MASK_STOR_POOL = 0x0000000000140000
const MASK_CTRL_CONF = 0x0000000000100000
const MASK_SNAPSHOT = 0x00000000000C0000

// ## Codes 1-9: success ###
const CREATED = (1 | MASK_SUCCESS)
const DELETED = (2 | MASK_SUCCESS)
const MODIFIED = (3 | MASK_SUCCESS)
const PASSPHRASE_ACCEPTED = (4 | MASK_SUCCESS)

// ## Codes 100 - 999: failures ###

// ## Codes 100 - 199: sql failures ###
const FAIL_SQL = (100 | MASK_ERROR)
const FAIL_SQL_ROLLBACK = (101 | MASK_ERROR)

// ## Codes 200-299: invalid * failures ###
const FAIL_INVLD_NODE_NAME = (200 | MASK_ERROR)
const FAIL_INVLD_NODE_TYPE = (201 | MASK_ERROR)
const FAIL_INVLD_RSC_NAME = (202 | MASK_ERROR)
const FAIL_INVLD_RSC_PORT = (203 | MASK_ERROR)
const FAIL_INVLD_NODE_ID = (204 | MASK_ERROR)
const FAIL_INVLD_VLM_NR = (205 | MASK_ERROR)
const FAIL_INVLD_VLM_SIZE = (206 | MASK_ERROR)
const FAIL_INVLD_MINOR_NR = (207 | MASK_ERROR)
const FAIL_INVLD_STOR_POOL_NAME = (208 | MASK_ERROR)
const FAIL_INVLD_NET_NAME = (209 | MASK_ERROR)
const FAIL_INVLD_NET_ADDR = (210 | MASK_ERROR)
const FAIL_INVLD_NET_PORT = (211 | MASK_ERROR)
const FAIL_INVLD_NET_TYPE = (212 | MASK_ERROR)
const FAIL_INVLD_PROP = (213 | MASK_ERROR)
const FAIL_INVLD_TRANSPORT_TYPE = (214 | MASK_ERROR)
const FAIL_INVLD_TCP_PORT = (215 | MASK_ERROR)
const FAIL_INVLD_CRYPT_PASSPHRASE = (216 | MASK_ERROR)
const FAIL_INVLD_ENCRYPT_TYPE = (217 | MASK_ERROR)
const FAIL_INVLD_SNAPSHOT_NAME = (218 | MASK_ERROR)
const FAIL_INVLD_PLACE_COUNT = (219 | MASK_ERROR)
const FAIL_INVLD_FREE_SPACE_MGR_NAME = (220 | MASK_ERROR)
const FAIL_INVLD_STOR_DRIVER = (221 | MASK_ERROR)
const FAIL_INVLD_DRBD_PROXY_COMPRESSION_TYPE = (222 | MASK_ERROR)

// ## Codes 300-399: dependency not found failures ###
const FAIL_NOT_FOUND_NODE = (300 | MASK_ERROR)
const FAIL_NOT_FOUND_RSC_DFN = (301 | MASK_ERROR)
const FAIL_NOT_FOUND_RSC = (302 | MASK_ERROR)
const FAIL_NOT_FOUND_VLM_DFN = (303 | MASK_ERROR)
const FAIL_NOT_FOUND_VLM = (304 | MASK_ERROR)
const FAIL_NOT_FOUND_NET_IF = (305 | MASK_ERROR)
const FAIL_NOT_FOUND_NODE_CONN = (306 | MASK_ERROR)
const FAIL_NOT_FOUND_RSC_CONN = (307 | MASK_ERROR)
const FAIL_NOT_FOUND_VLM_CONN = (308 | MASK_ERROR)
const FAIL_NOT_FOUND_STOR_POOL_DFN = (309 | MASK_ERROR)
const FAIL_NOT_FOUND_STOR_POOL = (310 | MASK_ERROR)
const FAIL_NOT_FOUND_DFLT_STOR_POOL = (311 | MASK_ERROR)
const FAIL_NOT_FOUND_CRYPT_KEY = (312 | MASK_ERROR)
const FAIL_NOT_FOUND_SNAPSHOT_DFN = (313 | MASK_ERROR)
const FAIL_NOT_FOUND_SNAPSHOT_VLM_DFN = (314 | MASK_ERROR)
const FAIL_NOT_FOUND_SNAPSHOT = (315 | MASK_ERROR)

// ## Codes 400-499: access denied failures ###
const FAIL_ACC_DENIED_NODE = (400 | MASK_ERROR)
const FAIL_ACC_DENIED_RSC_DFN = (401 | MASK_ERROR)
const FAIL_ACC_DENIED_RSC = (402 | MASK_ERROR)
const FAIL_ACC_DENIED_VLM_DFN = (403 | MASK_ERROR)
const FAIL_ACC_DENIED_VLM = (404 | MASK_ERROR)
const FAIL_ACC_DENIED_STOR_POOL_DFN = (405 | MASK_ERROR)
const FAIL_ACC_DENIED_STOR_POOL = (406 | MASK_ERROR)
const FAIL_ACC_DENIED_NODE_CONN = (407 | MASK_ERROR)
const FAIL_ACC_DENIED_RSC_CONN = (408 | MASK_ERROR)
const FAIL_ACC_DENIED_VLM_CONN = (409 | MASK_ERROR)
const FAIL_ACC_DENIED_STLT_CONN = (410 | MASK_ERROR)
const FAIL_ACC_DENIED_CTRL_CFG = (411 | MASK_ERROR)
const FAIL_ACC_DENIED_COMMAND = (412 | MASK_ERROR)
const FAIL_ACC_DENIED_WATCH = (413 | MASK_ERROR)
const FAIL_ACC_DENIED_SNAPSHOT_DFN = (414 | MASK_ERROR)
const FAIL_ACC_DENIED_SNAPSHOT = (415 | MASK_ERROR)
const FAIL_ACC_DENIED_SNAPSHOT_VLM_DFN = (416 | MASK_ERROR)
const FAIL_ACC_DENIED_FREE_SPACE_MGR = (417 | MASK_ERROR)

// ## Codes 500-599: data already exists failures ###
const FAIL_EXISTS_NODE = (500 | MASK_ERROR)
const FAIL_EXISTS_RSC_DFN = (501 | MASK_ERROR)
const FAIL_EXISTS_RSC = (502 | MASK_ERROR)
const FAIL_EXISTS_VLM_DFN = (503 | MASK_ERROR)
const FAIL_EXISTS_VLM = (504 | MASK_ERROR)
const FAIL_EXISTS_NET_IF = (505 | MASK_ERROR)
const FAIL_EXISTS_NODE_CONN = (506 | MASK_ERROR)
const FAIL_EXISTS_RSC_CONN = (507 | MASK_ERROR)
const FAIL_EXISTS_VLM_CONN = (508 | MASK_ERROR)
const FAIL_EXISTS_STOR_POOL_DFN = (509 | MASK_ERROR)
const FAIL_EXISTS_STOR_POOL = (510 | MASK_ERROR)
const FAIL_EXISTS_STLT_CONN = (511 | MASK_ERROR)
const FAIL_EXISTS_CRYPT_PASSPHRASE = (512 | MASK_ERROR)
const FAIL_EXISTS_WATCH = (513 | MASK_ERROR)
const FAIL_EXISTS_SNAPSHOT_DFN = (514 | MASK_ERROR)
const FAIL_EXISTS_SWORDFISH_TARGET_PER_RSC_DFN = (515 | MASK_ERROR)
const FAIL_EXISTS_SNAPSHOT = (516 | MASK_ERROR)

// ## Codes 600-699: data missing failures ###
const FAIL_MISSING_PROPS = (600 | MASK_ERROR)
const FAIL_MISSING_PROPS_NETCOM_TYPE = (601 | MASK_ERROR)
const FAIL_MISSING_PROPS_NETCOM_PORT = (602 | MASK_ERROR)
const FAIL_MISSING_NETCOM = (603 | MASK_ERROR)
const FAIL_MISSING_PROPS_NETIF_NAME = (604 | MASK_ERROR)
const FAIL_MISSING_STLT_CONN = (605 | MASK_ERROR)

// ## Codes 700-799: uuid mismatch failures ###
const FAIL_UUID_NODE = (700 | MASK_ERROR)
const FAIL_UUID_RSC_DFN = (701 | MASK_ERROR)
const FAIL_UUID_RSC = (702 | MASK_ERROR)
const FAIL_UUID_VLM_DFN = (703 | MASK_ERROR)
const FAIL_UUID_VLM = (704 | MASK_ERROR)
const FAIL_UUID_NET_IF = (705 | MASK_ERROR)
const FAIL_UUID_NODE_CONN = (706 | MASK_ERROR)
const FAIL_UUID_RSC_CONN = (707 | MASK_ERROR)
const FAIL_UUID_VLM_CONN = (708 | MASK_ERROR)
const FAIL_UUID_STOR_POOL_DFN = (709 | MASK_ERROR)
const FAIL_UUID_STOR_POOL = (710 | MASK_ERROR)

// ## Codes 800-899: number pools exhausted ###
const FAIL_POOL_EXHAUSTED_VLM_NR = (800 | MASK_ERROR)
const FAIL_POOL_EXHAUSTED_MINOR_NR = (801 | MASK_ERROR)
const FAIL_POOL_EXHAUSTED_TCP_PORT = (802 | MASK_ERROR)
const FAIL_POOL_EXHAUSTED_NODE_ID = (803 | MASK_ERROR)

// ## Other failures ###
const FAIL_STOR_POOL_CONFIGURATION_ERROR = (990 | MASK_ERROR)
const FAIL_INSUFFICIENT_REPLICA_COUNT = (991 | MASK_ERROR)
const FAIL_RSC_BUSY = (992 | MASK_ERROR)
const FAIL_INSUFFICIENT_PEER_SLOTS = (993 | MASK_ERROR)
const FAIL_SNAPSHOTS_NOT_SUPPORTED = (994 | MASK_ERROR)
const FAIL_NOT_CONNECTED = (995 | MASK_ERROR)
const FAIL_NOT_ENOUGH_NODES = (996 | MASK_ERROR)
const FAIL_IN_USE = (997 | MASK_ERROR)
const FAIL_UNKNOWN_ERROR = (998 | MASK_ERROR)
const FAIL_IMPL_ERROR = (999 | MASK_ERROR)

// ## Codes 1000-1999: warnings ###
const WARN_INVLD_OPT_PROP_NETCOM_ENABLED = (1001 | MASK_WARN)
const WARN_NOT_CONNECTED = (1002 | MASK_WARN)
const WARN_STLT_NOT_UPDATED = (1003 | MASK_WARN)
const WARN_NO_STLT_CONN_DEFINED = (1004 | MASK_WARN)
const WARN_DEL_UNSET_PROP = (1005 | MASK_WARN)
const WARN_RSC_ALREADY_DEPLOYED = (1006 | MASK_WARN)
const WARN_RSC_ALREADY_HAS_DISK = (1007 | MASK_WARN)
const WARN_RSC_ALREADY_DISKLESS = (1008 | MASK_WARN)
const WARN_ALL_DISKLESS = (1009 | MASK_WARN)
const WARN_STORAGE_ERROR = (1010 | MASK_WARN)
const WARN_NOT_FOUND = (3000 | MASK_WARN)

// ## Special codes ###
const UNKNOWN_API_CALL = (0x0FFFFFFFFFFFFFFF | MASK_ERROR)
const API_CALL_AUTH_REQ = (0x0FFFFFFFFFFFFFFE | MASK_ERROR)
const API_CALL_PARSE_ERROR = (0x0FFFFFFFFFFFFFFD | MASK_ERROR)

// ## SignIn codes ###
const RC_SIGNIN_PASS = (10000 | MASK_SUCCESS)
const RC_SIGNIN_FAIL = (10000 | MASK_ERROR)

// ## Special answer message content types ###
// Textual MsgApiCallResponse responses
const API_REPLY = "Reply"
// Indicates that the immediate answers to the API call are complete
const API_END_OF_IMMEDIATE_ANSWERS = "EndOfImmediateAnswers"

// ## Create object APIs ###
const API_CRT_NODE = "CrtNode"
const API_HOSTNAME = "Hostname"
const API_CRT_RSC = "CrtRsc"
const API_CRT_RSC_DFN = "CrtRscDfn"
const API_CRT_NET_IF = "CrtNetIf"
const API_CRT_VLM_DFN = "CrtVlmDfn"
const API_CRT_SNAPSHOT = "CrtSnapshot"
const API_CRT_STOR_POOL_DFN = "CrtStorPoolDfn"
const API_CRT_STOR_POOL = "CrtStorPool"
const API_CRT_NODE_CONN = "CrtNodeConn"
const API_CRT_RSC_CONN = "CrtRscConn"
const API_CRT_VLM_CONN = "CrtVlmConn"
const API_AUTO_PLACE_RSC = "AutoPlaceRsc"
const API_CRT_CRYPT_PASS = "CrtCryptPass"
const API_CRT_SF_TARGET_NODE = "CrtSfTargetNode"
const API_RESTORE_VLM_DFN = "RestoreVlmDfn"
const API_RESTORE_SNAPSHOT = "RestoreSnapshot"

// ## Modify object APIs ###
const API_MOD_NODE = "ModNode"
const API_MOD_NODE_CONN = "ModNodeConn"
const API_MOD_RSC = "ModRsc"
const API_TOGGLE_DISK = "ToggleDisk"
const API_MOD_RSC_CONN = "ModRscConn"
const API_MOD_RSC_DFN = "ModRscDfn"
const API_MOD_NET_IF = "ModNetIf"
const API_MOD_STOR_POOL = "ModStorPool"
const API_MOD_STOR_POOL_DFN = "ModStorPoolDfn"
const API_MOD_VLM_DFN = "ModVlmDfn"
const API_MOD_VLM = "ModVlm"
const API_MOD_VLM_CONN = "ModVlmConn"
const API_MOD_SNAPSHOT = "ModSnapshot"
const API_MOD_CRYPT_PASS = "ModCryptPass"
const API_ENABLE_DRBD_PROXY = "EnableDrbdProxy"
const API_DISABLE_DRBD_PROXY = "DisableDrbdProxy"
const API_MOD_DRBD_PROXY = "ModifyDrbdProxy"
const API_ROLLBACK_SNAPSHOT = "RollbackSnapshot"

// ## Delete object APIs ###
const API_DEL_NODE = "DelNode"
const API_DEL_RSC = "DelRsc"
const API_DEL_RSC_DFN = "DelRscDfn"
const API_DEL_NET_IF = "DelNetIf"
const API_DEL_VLM_DFN = "DelVlmDfn"
const API_DEL_STOR_POOL_DFN = "DelStorPoolDfn"
const API_DEL_STOR_POOL = "DelStorPool"
const API_DEL_NODE_CONN = "DelNodeConn"
const API_DEL_RSC_CONN = "DelRscConn"
const API_DEL_VLM_CONN = "DelVlmConn"
const API_DEL_SNAPSHOT = "DelSnapshot"
const API_LOST_NODE = "LostNode"

// ## Authentication APIs ###
const API_SIGN_IN = "SignIn"
const API_VERSION = "Version"

// ## Debug APIs ###
const API_CRT_DBG_CNSL = "CrtDbgCnsl"
const API_DSTR_DBG_CNSL = "DstrDbgCnsl"

// ## Command APIs ###
const API_CONTROL_CTRL = "ControlCtrl"
const API_CMD_SHUTDOWN = "Shutdown"
const API_NODE_RECONNECT = "NodeReconnect"

// ## List object APIs ###
const API_LST_NODE = "LstNode"
const API_LST_RSC = "LstRsc"
const API_LST_RSC_DFN = "LstRscDfn"
const API_LST_NET_IF = "LstNetIf"
const API_LST_VLM_DFN = "LstVlmDfn"
const API_LST_VLM = "LstVlm"
const API_LST_SNAPSHOT_DFN = "LstSnapshotDfn"
const API_LST_STOR_POOL = "LstStorPool"
const API_LST_STOR_POOL_DFN = "LstStorPoolDfn"
const API_LST_ERROR_REPORTS = "LstErrorReports"
const API_REQ_ERROR_REPORTS = "ReqErrorReports"
const API_REQ_RSC_CONN_LIST = "ReqRscConnList"
const API_LST_RSC_CONN = "LstRscConn"

// ## Query APIs ###
const API_QRY_MAX_VLM_SIZE = "QryMaxVlmSize"
const API_RSP_MAX_VLM_SIZE = "RspMaxVlmSize"

// ## Event APIs ###
const API_CRT_WATCH = "CrtWatch"
const API_DEL_WATCH = "DelWatch"
const API_EVENT = "Event"
const API_RPT_SPC = "RptSpc"
const API_PING = "Ping"
const API_PONG = "Pong"
const API_MOD_INF = "ModInf"
const API_VSN_INF = "VsnInf"
const API_SET_CFG_VAL = "SetCfgVal"
const API_DEL_CFG_VAL = "DelCfgVal"
const API_LST_CFG_VAL = "LstCfgVal"

// ## Encryption APIs ###
const API_ENTER_CRYPT_PASS = "EnterCryptPass"

// ## Event stream actions ###
const EVENT_STREAM_VALUE = "Value"
const EVENT_STREAM_CLOSE_NO_CONNECTION = "CloseNoConnection"
const EVENT_STREAM_CLOSE_REMOVED = "CloseRemoved"

// ## Events ###
const EVENT_VOLUME_DISK_STATE = "VlmDiskState"
// State of resource based on DRBD status (or other underlying system)
const EVENT_RESOURCE_STATE = "ResourceState"

// ## Object property keys ###
const KEY_UUID = "UUID"
const KEY_NODE = "Node"
const KEY_RSC_DFN = "RscDfn"
const KEY_STOR_POOL_DFN = "StorPoolDfn"
const KEY_1ST_NODE = "FirstNode"
const KEY_2ND_NODE = "SecondNode"
const KEY_SNAPSHOT = "Snapshot"
const KEY_NODE_NAME = "NodeName"
const KEY_NODE_TYPE = "NodeType"
const KEY_NODE_FLAGS = "NodeFlags"
const KEY_NODE_ID = "NodeId"
const KEY_1ST_NODE_NAME = "FirstNodeName"
const KEY_2ND_NODE_NAME = "SecondNodeName"
const KEY_RSC_NAME = "RscName"
const KEY_STOR_POOL_NAME = "StorPoolName"
const KEY_NET_IF_NAME = "NetIfName"
const KEY_SNAPSHOT_NAME = "SnapshotName"
const KEY_VLM_NR = "VlmNr"
const KEY_VLM_SIZE = "VlmSize"
const KEY_MINOR_NR = "MinorNr"
const KEY_PEER_COUNT = "PeerCount"
const KEY_AL_SIZE = "AlSize"
const KEY_AL_STRIPES = "AlStripes"
const KEY_ID = "ID"
const KEY_ROLE = "Role"
const KEY_MISSING_NAMESPC = "MissingNameSpace"
const KEY_VLM_RESTORE_FROM_RESOURCE = "RestoreFromResource"
const KEY_VLM_RESTORE_FROM_SNAPSHOT = "RestoreFromSnapshot"
const KEY_DRBD_CURRENT_GI = "DrbdCurrentGi"
const KEY_DRBD_BITMAP_GI = "DrbdBitmapGi"
const KEY_DRBD_HISTORY_1_GI = "DrbdHistory1Gi"
const KEY_DRBD_HISTORY_2_GI = "DrbdHistory2Gi"
const KEY_DMSTATS = "DMStats"
const KEY_SNAPSHOT_DFN_SEQUENCE_NUMBER = "SequenceNumber"

// ## Property namespaces ###
const NAMESPC_NETCOM = "NetCom"
const NAMESPC_DFLT = "Default"
const NAMESPC_LOGGING = "Logging"
const NAMESPC_ALLOC = "Allocation"
const NAMESPC_NETIF = "NetIf"
const NAMESPC_STLT = "Satellite"
const NAMESPC_STORAGE_DRIVER = "StorDriver"
const NAMESPC_DRBD_PROXY = "DrbdProxy"
const NAMESPC_AUXILIARY = "Aux"
const NAMESPC_DRBD_OPTIONS = "DrbdOptions"
const NAMESPC_DRBD_NET_OPTIONS = "DrbdOptions/Net"
const NAMESPC_DRBD_DISK_OPTIONS = "DrbdOptions/Disk"
const NAMESPC_DRBD_RESOURCE_OPTIONS = "DrbdOptions/Resource"
const NAMESPC_DRBD_PEER_DEVICE_OPTIONS = "DrbdOptions/PeerDevice"
const NAMESPC_DRBD_PROXY_OPTIONS = "DrbdOptions/Proxy"
const NAMESPC_DRBD_PROXY_COMPRESSION_OPTIONS = "DrbdOptions/ProxyCompression"

// ## Storage pool property keys ###
const KEY_STOR_POOL_VOLUME_GROUP = "LvmVg"
const KEY_STOR_POOL_THIN_POOL = "ThinPool"
const KEY_STOR_POOL_ZPOOL = "ZPool"
const KEY_STOR_POOL_ZPOOLTHIN = "ZPoolThin"
const KEY_STOR_POOL_SF_URL = "SwordfishUrl"
const KEY_STOR_POOL_SF_STOR_SVC = "SwordfishStorSvc"
const KEY_STOR_POOL_SF_STOR_POOL = "SwordfishStorPool"
const KEY_STOR_POOL_SF_USER_NAME = "SwordfishUserName"
const KEY_STOR_POOL_SF_USER_PW = "SwordfishUserPw"
const KEY_STOR_POOL_SF_POLL_TIMEOUT_VLM_CRT = "SwordfishVolumeCreateTimeout"
const KEY_STOR_POOL_SF_POLL_RETRIES_VLM_CRT = "SwordfishVolumeCreateRetries"
const KEY_STOR_POOL_SF_POLL_TIMEOUT_ATTACH_VLM = "SwordfishAttachVolumeTimeout"
const KEY_STOR_POOL_SF_POLL_RETRIES_ATTACH_VLM = "SwordfishAttachVolumeRetries"
const KEY_STOR_POOL_SF_POLL_TIMEOUT_GREP_NVME_UUID = "SwordfishGrepNvmeUuidTimeout"
const KEY_STOR_POOL_SF_POLL_RETRIES_GREP_NVME_UUID = "SwordfishGrepNvmeUuidRetries"
const KEY_STOR_POOL_SF_COMPOSED_NODE_NAME = "SwordfishComposedNodeName"
const KEY_STOR_POOL_SF_RETRY_COUNT = "SwordfishRetryCount"
const KEY_STOR_POOL_SF_RETRY_DELAY = "SwordfishRetryDelay"
const KEY_STOR_POOL_PREF_NIC = "PrefNic"
const KEY_STOR_POOL_CRYPT_PASSWD = "CryptPasswd"
const KEY_STOR_POOL_OVERRIDE_VLM_ID = "OverrideVlmId"
const KEY_STOR_POOL_DFN_MAX_OVERSUBSCRIPTION_RATIO = "MaxOversubscriptionRatio"

// ## Storage pool traits keys ###
const KEY_STOR_POOL_SUPPORTS_SNAPSHOTS = "SupportsSnapshots"
const KEY_STOR_POOL_PROVISIONING = "Provisioning"
// Unit of smallest allocation. The size in KiB as a decimal number.
const KEY_STOR_POOL_ALLOCATION_UNIT = "AllocationUnit"

// ## Storage pool traits values ###
const VAL_STOR_POOL_PROVISIONING_FAT = "Fat"
const VAL_STOR_POOL_PROVISIONING_THIN = "Thin"

// ## DRBD Proxy keys (other than 'options') ###
const KEY_DRBD_PROXY_COMPRESSION_TYPE = "CompressionType"

// ## Property keys ###
const KEY_PORT_NR = "PortNr"
const KEY_IP_ADDR = "IPAddr"
const KEY_BIND_ADDR = "BindAddr"
const KEY_NETCOM_TYPE = "NetComType"
const KEY_NETIF_NAME = "NetIfName"
const KEY_NETIF_TYPE = "NetIfType"
const KEY_NETCOM_ENABLED = "NetComEnabled"
const KEY_KEYSTORE = "Keystore"
const KEY_TRUSTSTORE = "Truststore"
const KEY_KEY_PWD = "KeyPwd"
const KEY_KEYSTORE_PWD = "KeystorePwd"
const KEY_TRUSTSTORE_PWD = "TruststorePwd"
const KEY_SSL_PROTO = "SslProto"
const KEY_TCP_PORT_AUTO_RANGE = "TcpPortAutoRange"
const KEY_MINOR_NR_AUTO_RANGE = "MinorNrAutoRange"
const KEY_GLOBAL_SEQ_API_CALLS = "GlobSeqApiCalls"
const KEY_SF_TARGET_PORT_AUTO_RANGE = "SwordfishTargetPortAutoRange"
const KEY_CUR_STLT_CONN_NAME = "CurStltConnName"
const KEY_PEER_SLOTS_NEW_RESOURCE = "PeerSlotsNewResource"
const KEY_PEER_SLOTS = "PeerSlots"
const KEY_ALLOW_LARGER_VOLUME_SIZE = "AllowLargerVolumeSize"
const KEY_RSC_ROLLBACK_TARGET = "RollbackTarget"
const KEY_RSC_MIGRATE_FROM = "MigrateFrom"

// ## Property values ###
const VAL_NETCOM_TYPE_SSL = "SSL"
const VAL_NETCOM_TYPE_PLAIN = "Plain"
const VAL_SSL_PROTO_TLSv1 = "TLSv1"

// ## DRBD Proxy compression type property values ###
const VAL_DRBD_PROXY_COMPRESSION_NONE = "none"
const VAL_DRBD_PROXY_COMPRESSION_ZLIB = "zlib"
const VAL_DRBD_PROXY_COMPRESSION_LZMA = "lzma"
const VAL_DRBD_PROXY_COMPRESSION_LZ4 = "lz4"

// ## Node Type values ###
const VAL_NODE_TYPE_CTRL = "Controller"
const VAL_NODE_TYPE_STLT = "Satellite"
const VAL_NODE_TYPE_CMBD = "Combined"
const VAL_NODE_TYPE_AUX = "Auxiliary"
const VAL_NODE_TYPE_SWFISH_TARGET = "SWORDFISH_TARGET"

// ## Net interface Type values ###
const VAL_NETIF_TYPE_IP = "IP"
const VAL_NETIF_TYPE_RDMA = "RDMA"
const VAL_NETIF_TYPE_ROCE = "RoCE"

// ## Authentication keys ###
const KEY_SEC_IDENTITY = "SecIdentity"
const KEY_SEC_ROLE = "SecRole"
const KEY_SEC_TYPE = "SecType"
const KEY_SEC_DOMAIN = "SecDomain"
const KEY_SEC_PASSWORD = "SecPassword"

// ## Default ports ###
const DFLT_CTRL_PORT_SSL = 3377
const DFLT_CTRL_PORT_PLAIN = 3376
const DFLT_STLT_PORT_SSL = 3367
const DFLT_STLT_PORT_PLAIN = 3366

// ## Boolean values ###
const VAL_TRUE = "True"
const VAL_FALSE = "False"

// ## Flag string values ###
const FLAG_CLEAN = "CLEAN"
const FLAG_DELETE = "DELETE"
const FLAG_DISKLESS = "DISKLESS"
const FLAG_QIGNORE = "QIGNORE"
const FLAG_ENCRYPTED = "ENCRYPTED"
const FLAG_SUCCESSFUL = "SUCCESSFUL"
const FLAG_FAILED_DEPLOYMENT = "FAILED_DEPLOYMENT"
const FLAG_FAILED_DISCONNECT = "FAILED_DISCONNECT"
const FLAG_RESIZE = "RESIZE"
const FLAG_DISK_ADDING = "DISK_ADDING"
const FLAG_DISK_ADD_REQUESTED = "DISK_ADD_REQUESTED"
const FLAG_DISK_REMOVING = "DISK_REMOVING"
const FLAG_DISK_REMOVE_REQUESTED = "DISK_REMOVE_REQUESTED"

// ## Satellite connection statuses ###
const CONN_STATUS_OFFLINE = 0
const CONN_STATUS_CONNECTED = 1
const CONN_STATUS_ONLINE = 2
const CONN_STATUS_VERSION_MISMATCH = 3
const CONN_STATUS_FULL_SYNC_FAILED = 4
const CONN_STATUS_AUTHENTICATION_ERROR = 5
const CONN_STATUS_UNKNOWN = 6
